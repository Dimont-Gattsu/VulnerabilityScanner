import sqlite3
import requests
import json
import time

def setup_database():
    conn = sqlite3.connect('vulnerabilities.db')
    c = conn.cursor()

    # Create table
    c.execute('''
        CREATE TABLE IF NOT EXISTS vulnerabilities (
            id TEXT PRIMARY KEY,
            description TEXT,
            published_date TEXT,
            last_modified_date TEXT,
            cvss_score REAL,
            cpe_uri TEXT
        )
    ''')

    conn.commit()
    conn.close()

def fetch_and_store_cve_data():
    conn = sqlite3.connect('vulnerabilities.db')
    c = conn.cursor()

    # Correct NVD API endpoint
    base_url = "https://services.nvd.nist.gov/rest/json/cves/2.0"
    headers = {
        'User-Agent': 'Mozilla/5.0'  # Some APIs require a User-Agent header
    }

    max_retries = 5
    for attempt in range(max_retries):
        try:
            response = requests.get(base_url, headers=headers)
            response.raise_for_status()  # Raise an error for bad status codes

            if response.status_code == 200:
                data = response.json()

                if 'vulnerabilities' not in data:
                    raise ValueError("Unexpected response format")

                for vuln in data['vulnerabilities']:
                    cve_item = vuln['cve']
                    cve_id = cve_item['id']
                    description = cve_item['descriptions'][0]['value']
                    published_date = cve_item['published']
                    last_modified_date = cve_item['lastModified']
                    # Get the CVSS score from the first available metric
                    cvss_score = None
                    if 'metrics' in cve_item and 'cvssMetricV2' in cve_item['metrics']:
                        cvss_score = cve_item['metrics']['cvssMetricV2'][0]['cvssData']['baseScore']
                    
                    # Get the CPE URI from the configurations object
                    cpe_uri = ''
                    if 'configurations' in cve_item:
                            if 'nodes' in cve_item['configurations'][0]:
                                if 'cpeMatch' in cve_item['configurations'][0]['nodes'][0]:
                                    cpe_uri = ','.join([cve_item['configurations'][0]['nodes'][0]['cpeMatch'][0]['criteria']])

                    c.execute('''
                        INSERT OR REPLACE INTO vulnerabilities (id, description, published_date, last_modified_date, cvss_score, cpe_uri)
                        VALUES (?, ?, ?, ?, ?, ?)
                    ''', (cve_id, description, published_date, last_modified_date, cvss_score, cpe_uri))

                break  # Exit the retry loop if successful

            else:
                print(f"Received unexpected status code {response.status_code}")

        except requests.exceptions.RequestException as e:
            print(f"HTTP request failed: {e}")
            if attempt < max_retries - 1:
                print(f"Retrying ({attempt + 1}/{max_retries})...")
                time.sleep(2 ** attempt)  # Exponential backoff

    conn.commit()
    conn.close()

if __name__ == "__main__":
    setup_database()
    fetch_and_store_cve_data()
    print("--------------------------")
    print("vulnerabilities.db created")
    print("--------------------------")
