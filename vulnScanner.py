import sqlite3
import xml.etree.ElementTree as ET
import subprocess
import re

def extract_version(version):
    if version is None or version == "":
        return None
    else:
        return version

def parse_nmap_output(output):
    services = {}
    root = ET.fromstring(output)
    for port in root.iter('port'):
        port_id = port.get('portid')
        service = port.find('service')
        if service is not None:
            service_name = service.get('name')
            version = service.get('version')
            product = service.get('product')
            services[port_id] = {'service': service_name, 'version': version, 'product': product}
    return services

def get_vulnerabilities_for_service(version, product):
    conn = sqlite3.connect('vulnerabilities.db')
    c = conn.cursor()
    vulnerabilities = []

    if version is not None:
        # Split the product name by spaces and search for each part
        product_parts = product.split()
        product_conditions = []
        for part in product_parts:
            product_conditions.append("description LIKE '%' || ? || '%'")
            product_conditions.append("cpe_uri LIKE '%' || ? || '%'")

        product_conditions_str = " OR ".join(product_conditions)

        c.execute(f'''
            SELECT * FROM vulnerabilities
            WHERE (
                {product_conditions_str}
            ) AND (
                cpe_uri LIKE ? OR description LIKE ?
            )
        ''', [part for part in product_parts for _ in (1, 2)] + ['%' + version + '%', '%' + version + '%'])

        vulnerabilities.extend(c.fetchall())
    else:
        print(f"Skipping product {product} because version is not specified.")

    conn.close()
    return vulnerabilities


def scan_host_vulnerabilities(host, services):
    for port, service_info in services.items():
        service_name = service_info['service']
        version = service_info['version']
        product = service_info['product']
        if version is not None and version != "":
            print(f"\n## Scanning service {service_name} on port {port} with version {version} and product {product}")
            vulnerabilities = get_vulnerabilities_for_service(version, product)
            if vulnerabilities:
                print("\n### Vulnerabilities found:")
                for vulnerability in vulnerabilities:
                    print(f" - {vulnerability[0]} - {vulnerability[1]}")
            else:
                print("\n### No vulnerabilities found.")
        else:
            print(f"\nSkipping service {service_name} on port {port} because version is not specified.")

def main(host):
    print(f"\n## Scanning and searching for vulnerabilities on {host}...")
    
    # Run Nmap scan
    print("\n### Running Nmap scan...")
    nmap_output = subprocess.check_output(['nmap', '-oX', '-', '-sC', '-sV', host]).decode('utf-8')
    print("\n### Nmap scan complete.")
    
    # Parse Nmap output
    print("\n### Parsing Nmap output...")
    services = parse_nmap_output(nmap_output)
    print("\n### Nmap output parsed.")
    
    # Print open ports
    print("\n### Open ports:")
    max_service_len = max(len(service_info['service']) for service_info in services.values())
    max_version_len = max(len(str(service_info['version'])) for service_info in services.values())
    max_product_len = max(len(str(service_info['product'])) for service_info in services.values())
    
    for port, service_info in services.items():
        service_name = service_info['service'].ljust(max_service_len)
        version = str(service_info['version']).ljust(max_version_len)
        product = str(service_info['product']).ljust(max_product_len)
        print(f" - Port: {port.rjust(5)} | Service: {service_name} | Version: {version} | Product: {product}")
    
    # Scan for vulnerabilities
    scan_host_vulnerabilities(host, services)

if __name__ == "__main__":
    main('10.129.68.28')
